[{"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx":"1","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts":"2","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx":"3","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx":"4","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts":"5","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx":"6","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx":"7","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx":"8","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx":"9","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts":"10","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx":"11","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts":"12","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx":"13","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx":"14","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx":"15","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx":"16","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx":"17","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx":"18","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx":"19","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx":"20","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts":"21","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx":"22","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx":"23","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx":"24","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx":"25"},{"size":592,"mtime":1611919771027,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1611828545235,"results":"28","hashOfConfig":"27"},{"size":220,"mtime":1611910854590,"results":"29","hashOfConfig":"27"},{"size":3956,"mtime":1614782366496,"results":"30","hashOfConfig":"27"},{"size":620,"mtime":1614776528127,"results":"31","hashOfConfig":"27"},{"size":1561,"mtime":1614770380297,"results":"32","hashOfConfig":"27"},{"size":386,"mtime":1614614394422,"results":"33","hashOfConfig":"27"},{"size":2280,"mtime":1614783714556,"results":"34","hashOfConfig":"27"},{"size":378,"mtime":1614530256648,"results":"35","hashOfConfig":"27"},{"size":3094,"mtime":1614779388349,"results":"36","hashOfConfig":"27"},{"size":2245,"mtime":1612523596741,"results":"37","hashOfConfig":"27"},{"size":3881,"mtime":1614784248346,"results":"38","hashOfConfig":"27"},{"size":4058,"mtime":1614784353266,"results":"39","hashOfConfig":"27"},{"size":1773,"mtime":1614612926889,"results":"40","hashOfConfig":"27"},{"size":2478,"mtime":1612525331505,"results":"41","hashOfConfig":"27"},{"size":1530,"mtime":1614779002628,"results":"42","hashOfConfig":"27"},{"size":6093,"mtime":1614622020542,"results":"43","hashOfConfig":"27"},{"size":696,"mtime":1614439189169,"results":"44","hashOfConfig":"27"},{"size":824,"mtime":1614439587089,"results":"45","hashOfConfig":"27"},{"size":4525,"mtime":1614771508566,"results":"46","hashOfConfig":"27"},{"size":560,"mtime":1614624937168,"results":"47","hashOfConfig":"27"},{"size":1481,"mtime":1614626172895,"results":"48","hashOfConfig":"27"},{"size":908,"mtime":1614778410732,"results":"49","hashOfConfig":"27"},{"size":1885,"mtime":1614782740920,"results":"50","hashOfConfig":"27"},{"size":2157,"mtime":1614529622538,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1vos0jp",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx",[],["110","111"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx",["112","113"],"import Routes from \"./routes\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx",["114"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts",["115","116"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx",["117","118","119"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { Modal, Input } from \"antd\";\n\ninterface GroupUsers {\n  uid: string;\n}\n\ninterface Props {\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n}\n\nexport default function CreateGroup(props: Props) {\n  const [groupName, setGroupName] = useState(\"\");\n  const [userToAdd, setUserToAdd] = useState(\"\");\n  const [groupUsers, setGroupUsers] = useState([] as string[]);\n\n  const { isModalVisible, setIsModalVisible } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setGroupName(\"\");\n    setUserToAdd(\"\");\n    setGroupUsers([]);\n  };\n\n  const handleGroupNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setGroupName(event.target.value);\n  };\n\n  const handleUserToAddInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setUserToAdd(event.target.value);\n  };\n\n  const handleAddUserToGroup = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    // Check if enter was pressed\n    if (event.key === \"Enter\") {\n      if (userToAdd.length > 1) {\n        setGroupUsers((prevState) => [...prevState, userToAdd]);\n        setUserToAdd(\"\");\n      }\n    }\n  };\n\n  // const handleCreateGroup = (users: GroupUsers[]) => {\n  //   if (auth.currentUser) {\n  //     createGroupChat({\n  //       users: users,\n  //       createdBy: auth.currentUser.uid,\n  //       groupName: groupName,\n  //       isPrivate: users.length > 2,\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a Group Chat\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        // onOk={() => handleCreateGroup([{ uid: \"hello\" }])}\n        okText=\"Create Group\"\n      >\n        Enter group name:\n        <Input type=\"text\" value={groupName} onChange={handleGroupNameInput} />\n        Enter user email to add to group:\n        <Input\n          type=\"text\"\n          value={userToAdd}\n          onChange={handleUserToAddInput}\n          onKeyPress={handleAddUserToGroup}\n        />\n        Group users\n        <span>{JSON.stringify(groupUsers)}</span>\n      </Modal>\n    </>\n  );\n}\n",["120","121"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx",["122"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx",["123","124"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { addContact, fetchContacts } from \"../../firebase/users\";\nimport { Modal, Input } from \"antd\";\n\ninterface Contacts {\n  contactName: string;\n  uid: string;\n}\n\ninterface Props {\n  contacts: Contacts[];\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n  toFetchContacts: boolean;\n  setToFetchContacts: any;\n}\n\nconst initialContactState = {\n  contactName: \"\",\n  uid: \"\",\n};\n\nexport default function CreateContact(props: Props) {\n  const [contactDetails, setContactDetails] = useState(initialContactState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const {\n    isModalVisible,\n    setIsModalVisible,\n    setToFetchContacts,\n    toFetchContacts,\n  } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setContactDetails(initialContactState);\n    setError(\"\");\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setError(\"\");\n\n    setContactDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleCreateContact = () => {\n    if (contactDetails.uid && contactDetails.contactName) {\n      setLoading(true);\n      addContact(contactDetails).then((res) => {\n        console.log(res);\n        if (res) {\n          setError(res);\n          setLoading(false);\n        } else {\n          setLoading(false);\n          handleModalHide();\n          setToFetchContacts(!toFetchContacts);\n        }\n      });\n    } else {\n      setError(\"All input fields must be filled\");\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a new contact\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={() => handleCreateContact()}\n        okText=\"Create Contact\"\n        confirmLoading={loading}\n      >\n        Enter contact's name:\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          value={contactDetails.contactName}\n          onChange={(e) => handleOnChange(e)}\n        />\n        Enter contact's id:\n        <Input\n          type=\"text\"\n          name=\"uid\"\n          value={contactDetails.uid}\n          onChange={(e) => handleOnChange(e)}\n          style={{ marginBottom: 8 }}\n        />\n        {error.length > 1 && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>{error}</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx",["125","126","127","128"],"import React, { useState, useEffect } from \"react\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { ContactInterface } from \"../../common/interfaces\";\nimport ContactCard from \"../../components/ContactCard\";\nimport SelectedContactPill from \"../../components/SelectedContactPill\";\nimport { Input, Button, Modal } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  creatingGroup: boolean;\n  contacts: ContactInterface[];\n  handleShowCreateConversation: () => void;\n  handleSelectChat: (chat?: any) => void;\n}\n\nexport default function CreateConversation(props: Props) {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedContacts, setSelectedContacts] = useState(\n    [] as ContactInterface[]\n  );\n  const [availableContacts, setAvailableContacts] = useState(\n    [] as ContactInterface[]\n  );\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const {\n    creatingGroup,\n    contacts,\n    handleShowCreateConversation,\n    handleSelectChat,\n  } = props;\n\n  useEffect(() => {\n    if (contacts) {\n      setAvailableContacts(contacts);\n    }\n  }, [contacts]);\n\n  // updated available contacts\n  useEffect(() => {\n    if (selectedContacts.length > 0 && availableContacts) {\n      var updatedAvailableContacts: ContactInterface[] = [];\n\n      availableContacts.forEach((available) => {\n        // removed selected contacts from available\n        // does available is in selectedContacts?\n        // if no add her to updatedArray\n        const wasSelected = selectedContacts.some(\n          (selected) => selected.uid === available.uid\n        );\n\n        if (!wasSelected) {\n          updatedAvailableContacts.push(available);\n        }\n      });\n      console.log(updatedAvailableContacts);\n      setAvailableContacts(updatedAvailableContacts);\n      console.log(\"also update here\");\n    }\n  }, [selectedContacts.length]);\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleModalShow = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleGroupOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value);\n  };\n\n  const handleContactOnClick = (contact: ContactInterface) => {\n    setSelectedContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleRemoveSelectedContact = (contact: ContactInterface) => {\n    const selectedContactsClone = [...selectedContacts];\n    const updatedSelectedContacts = selectedContactsClone.filter(\n      (selectedContact) => selectedContact.uid !== contact.uid\n    );\n    setSelectedContacts(updatedSelectedContacts);\n    setAvailableContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleCreateGroup = () => {\n    setError(\"\");\n    setLoading(true);\n    createGroupChat({\n      users: selectedContacts,\n      groupName: groupName,\n      isPrivate: selectedContacts.length < 1,\n    })\n      .then((res) => {\n        const groupId = res;\n        setLoading(false);\n        setIsModalVisible(false);\n        handleShowCreateConversation();\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setError(err);\n      });\n  };\n\n  let classname = \"create-conversation\";\n  if (!creatingGroup) classname += \" hide\";\n  else classname.replace(\"hide\", \"\");\n\n  return (\n    <>\n      <div className={classname}>\n        <header>\n          <div>\n            <Button\n              onClick={handleShowCreateConversation}\n              icon={<ArrowLeftOutlined style={{ fontSize: \"18px\" }} />}\n              size=\"large\"\n              type=\"text\"\n            />\n            <div>Add conversation participants</div>\n          </div>\n        </header>\n        <div className=\"search-contacts\">\n          <div className=\"search-input\">\n            {selectedContacts && (\n              <div className=\"selected-contacts\">\n                {selectedContacts.map((contact, index) => {\n                  return (\n                    <SelectedContactPill\n                      key={index}\n                      contactImage={contact.photoURL}\n                      contactName={contact.contactName}\n                      onClick={() => handleRemoveSelectedContact(contact)}\n                    />\n                  );\n                })}\n              </div>\n            )}\n            <Input\n              type=\"text\"\n              placeholder=\"Type contact name\"\n              onChange={(e) => setSearchInput(e.target.value.toLowerCase())}\n            />\n          </div>\n\n          <div className=\"contacts-list\">\n            {availableContacts?.map((contact, index) => {\n              return (\n                <ContactCard\n                  key={index}\n                  contactName={contact.contactName}\n                  contactImage={contact.photoURL}\n                  contactId={contact.uid}\n                  onClick={() => handleContactOnClick(contact)}\n                />\n              );\n            })}\n          </div>\n\n          <div className=\"create-group-section\">\n            {selectedContacts.length > 0 && (\n              <Button\n                shape=\"circle\"\n                size=\"large\"\n                style={{ height: 48, width: 48 }}\n                icon={<ArrowRightOutlined />}\n                onClick={() => handleModalShow()}\n              ></Button>\n            )}\n          </div>\n        </div>\n      </div>\n      <Modal\n        title=\"New group\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={handleCreateGroup}\n        okText=\"Create Conversation\"\n        confirmLoading={loading}\n      >\n        <Input\n          type=\"text\"\n          placeholder=\"What's the group's subject?\"\n          onChange={handleGroupOnChange}\n          style={{ marginBottom: 6 }}\n        />\n        {error && (\n          <span style={{ fontSize: \"0.8rem\", color: \"red\" }}>{error}</span>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx",["129"],"import React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  contactName: string;\n  contactId: string;\n  contactImage: string;\n  onClick?: () => void;\n}\n\nexport default function ContactCard(props: Props) {\n  const { contactName, contactId, contactImage, onClick } = props;\n  return (\n    <div className=\"contact-card\" onClick={onClick}>\n      <div className=\"contact-card__image\">\n        <div\n          style={{\n            backgroundImage: `url('${contactImage}')`,\n            backgroundSize: \"cover\",\n          }}\n        >\n          {contactImage ? null : contactName[0]}\n        </div>\n      </div>\n      <div className=\"contact-card__name\">{contactName}</div>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx",["130"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx",["131","132"],"import { useEffect, useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport \"./styles.scss\";\n\ninterface Props {\n  text: string;\n  createdBy: string;\n  createdAt?: any;\n  contacts?: any;\n  user?: any;\n}\n\nexport default function ChatMessage(props: Props) {\n  const [senderName, setSenderName] = useState(null as any);\n  const { text, createdBy, createdAt, contacts, user } = props;\n\n  const messageType = createdBy === auth.currentUser?.uid ? \"sent\" : \"received\";\n\n  useEffect(() => {\n    const contact = contacts.find((elem: any) => elem.uid == createdBy);\n\n    if (contact) {\n      setSenderName(contact.contactName);\n    } else if (createdBy !== auth.currentUser?.uid) {\n      setSenderName(createdBy);\n    } else {\n      setSenderName(user.displayName);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className={`message ${messageType}`}>\n        <div className=\"message__content\">\n          <div className=\"message__content__sender\">{senderName}</div>\n          <div className=\"message__content__text\">{text}</div>\n          <p className=\"message__content__at\">\n            {createdAt && toDateTime(createdAt.seconds)}\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction toDateTime(secs: number) {\n  var t = new Date(0); // Epoch\n  t.setUTCSeconds(secs);\n  var hours = t.getHours();\n  var minutes = t.getMinutes();\n\n  return (\n    <span>\n      {hours > 9 ? hours : <>0{hours}</>}:\n      {minutes > 9 ? minutes : <>0{minutes}</>}\n    </span>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx",["133","134"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":3,"column":10,"nodeType":"141","messageId":"142","endLine":3,"endColumn":22},{"ruleId":"139","severity":1,"message":"143","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":41,"column":6,"nodeType":"146","endLine":41,"endColumn":21,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":67,"column":7,"nodeType":"150","messageId":"151","endLine":67,"endColumn":81},{"ruleId":"148","severity":1,"message":"149","line":89,"column":11,"nodeType":"150","messageId":"151","endLine":89,"endColumn":52},{"ruleId":"139","severity":1,"message":"152","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":14},{"ruleId":"139","severity":1,"message":"153","line":3,"column":10,"nodeType":"141","messageId":"142","endLine":3,"endColumn":25},{"ruleId":"139","severity":1,"message":"154","line":6,"column":11,"nodeType":"141","messageId":"142","endLine":6,"endColumn":21},{"ruleId":"135","replacedBy":"155"},{"ruleId":"137","replacedBy":"156"},{"ruleId":"144","severity":1,"message":"157","line":45,"column":6,"nodeType":"146","endLine":45,"endColumn":8,"suggestions":"158"},{"ruleId":"139","severity":1,"message":"152","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":14},{"ruleId":"139","severity":1,"message":"159","line":3,"column":22,"nodeType":"141","messageId":"142","endLine":3,"endColumn":35},{"ruleId":"139","severity":1,"message":"160","line":25,"column":10,"nodeType":"141","messageId":"142","endLine":25,"endColumn":21},{"ruleId":"139","severity":1,"message":"161","line":34,"column":5,"nodeType":"141","messageId":"142","endLine":34,"endColumn":21},{"ruleId":"144","severity":1,"message":"162","line":64,"column":6,"nodeType":"146","endLine":64,"endColumn":31,"suggestions":"163"},{"ruleId":"139","severity":1,"message":"164","line":100,"column":15,"nodeType":"141","messageId":"142","endLine":100,"endColumn":22},{"ruleId":"139","severity":1,"message":"165","line":12,"column":24,"nodeType":"141","messageId":"142","endLine":12,"endColumn":33},{"ruleId":"139","severity":1,"message":"166","line":22,"column":19,"nodeType":"141","messageId":"142","endLine":22,"endColumn":29},{"ruleId":"167","severity":1,"message":"168","line":20,"column":59,"nodeType":"169","messageId":"170","endLine":20,"endColumn":61},{"ruleId":"144","severity":1,"message":"171","line":29,"column":6,"nodeType":"146","endLine":29,"endColumn":8,"suggestions":"172"},{"ruleId":"139","severity":1,"message":"173","line":14,"column":5,"nodeType":"141","messageId":"142","endLine":14,"endColumn":22},{"ruleId":"139","severity":1,"message":"174","line":15,"column":5,"nodeType":"141","messageId":"142","endLine":15,"endColumn":19},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"@typescript-eslint/no-unused-vars","'useAuthState' is defined but never used.","Identifier","unusedVar","'useCollectionData' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedChat'. Either include it or remove the dependency array.","ArrayExpression",["177"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'auth' is defined but never used.","'createGroupChat' is defined but never used.","'GroupUsers' is defined but never used.",["175"],["176"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["178"],"'fetchContacts' is defined but never used.","'searchInput' is assigned a value but never used.","'handleSelectChat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'availableContacts' and 'selectedContacts'. Either include them or remove the dependency array.",["179"],"'groupId' is assigned a value but never used.","'contactId' is assigned a value but never used.","'setLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contacts', 'createdBy', and 'user.displayName'. Either include them or remove the dependency array.",["180"],"'conversationImage' is assigned a value but never used.","'conversationId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [conversations, selectedChat]",{"range":"189","text":"190"},"Update the dependencies array to be: [user]",{"range":"191","text":"192"},"Update the dependencies array to be: [availableContacts, selectedContacts, selectedContacts.length]",{"range":"193","text":"194"},"Update the dependencies array to be: [contacts, createdBy, user.displayName]",{"range":"195","text":"196"},[1181,1196],"[conversations, selectedChat]",[1416,1418],"[user]",[2064,2089],"[availableContacts, selectedContacts, selectedContacts.length]",[782,784],"[contacts, createdBy, user.displayName]"]