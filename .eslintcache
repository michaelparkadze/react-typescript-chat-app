[{"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx":"1","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts":"2","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx":"3","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx":"4","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts":"5","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx":"6","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx":"7","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx":"8","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx":"9","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts":"10","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx":"11","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts":"12","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx":"13","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx":"14","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx":"15","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx":"16","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx":"17","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx":"18","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx":"19","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx":"20","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts":"21","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx":"22","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx":"23","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx":"24","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx":"25","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadConversationImage/index.tsx":"26"},{"size":592,"mtime":1611919771027,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1611828545235,"results":"29","hashOfConfig":"28"},{"size":220,"mtime":1611910854590,"results":"30","hashOfConfig":"28"},{"size":3956,"mtime":1614782366496,"results":"31","hashOfConfig":"28"},{"size":620,"mtime":1614776528127,"results":"32","hashOfConfig":"28"},{"size":1561,"mtime":1614770380297,"results":"33","hashOfConfig":"28"},{"size":386,"mtime":1614614394422,"results":"34","hashOfConfig":"28"},{"size":2716,"mtime":1614791400189,"results":"35","hashOfConfig":"28"},{"size":378,"mtime":1614530256648,"results":"36","hashOfConfig":"28"},{"size":2966,"mtime":1614789220141,"results":"37","hashOfConfig":"28"},{"size":2245,"mtime":1612523596741,"results":"38","hashOfConfig":"28"},{"size":3881,"mtime":1614784248346,"results":"39","hashOfConfig":"28"},{"size":4349,"mtime":1614790157630,"results":"40","hashOfConfig":"28"},{"size":1773,"mtime":1614612926889,"results":"41","hashOfConfig":"28"},{"size":2478,"mtime":1612525331505,"results":"42","hashOfConfig":"28"},{"size":1530,"mtime":1614779002628,"results":"43","hashOfConfig":"28"},{"size":6093,"mtime":1614622020542,"results":"44","hashOfConfig":"28"},{"size":1095,"mtime":1614793265198,"results":"45","hashOfConfig":"28"},{"size":824,"mtime":1614439587089,"results":"46","hashOfConfig":"28"},{"size":5501,"mtime":1614789246130,"results":"47","hashOfConfig":"28"},{"size":560,"mtime":1614624937168,"results":"48","hashOfConfig":"28"},{"size":1530,"mtime":1614790542109,"results":"49","hashOfConfig":"28"},{"size":783,"mtime":1614788164641,"results":"50","hashOfConfig":"28"},{"size":1885,"mtime":1614782740920,"results":"51","hashOfConfig":"28"},{"size":2157,"mtime":1614529622538,"results":"52","hashOfConfig":"28"},{"size":2053,"mtime":1614787898472,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1vos0jp",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx",[],["116","117"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx",["118","119"],"import Routes from \"./routes\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx",["120"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts",["121","122"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx",["123","124","125"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { Modal, Input } from \"antd\";\n\ninterface GroupUsers {\n  uid: string;\n}\n\ninterface Props {\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n}\n\nexport default function CreateGroup(props: Props) {\n  const [groupName, setGroupName] = useState(\"\");\n  const [userToAdd, setUserToAdd] = useState(\"\");\n  const [groupUsers, setGroupUsers] = useState([] as string[]);\n\n  const { isModalVisible, setIsModalVisible } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setGroupName(\"\");\n    setUserToAdd(\"\");\n    setGroupUsers([]);\n  };\n\n  const handleGroupNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setGroupName(event.target.value);\n  };\n\n  const handleUserToAddInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setUserToAdd(event.target.value);\n  };\n\n  const handleAddUserToGroup = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    // Check if enter was pressed\n    if (event.key === \"Enter\") {\n      if (userToAdd.length > 1) {\n        setGroupUsers((prevState) => [...prevState, userToAdd]);\n        setUserToAdd(\"\");\n      }\n    }\n  };\n\n  // const handleCreateGroup = (users: GroupUsers[]) => {\n  //   if (auth.currentUser) {\n  //     createGroupChat({\n  //       users: users,\n  //       createdBy: auth.currentUser.uid,\n  //       groupName: groupName,\n  //       isPrivate: users.length > 2,\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a Group Chat\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        // onOk={() => handleCreateGroup([{ uid: \"hello\" }])}\n        okText=\"Create Group\"\n      >\n        Enter group name:\n        <Input type=\"text\" value={groupName} onChange={handleGroupNameInput} />\n        Enter user email to add to group:\n        <Input\n          type=\"text\"\n          value={userToAdd}\n          onChange={handleUserToAddInput}\n          onKeyPress={handleAddUserToGroup}\n        />\n        Group users\n        <span>{JSON.stringify(groupUsers)}</span>\n      </Modal>\n    </>\n  );\n}\n",["126","127"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx",["128"],"import React, { useState, useEffect } from \"react\";\nimport { auth, storage } from \"../../firebase\";\nimport { removeProfileImage } from \"../../firebase/users\";\nimport { ContactInterface } from \"../../common/interfaces\";\nimport UploadProfileImage from \"../UploadProfileImage\";\nimport ContactsTab from \"../ContactsTab\";\nimport ConversationsTab from \"../ConversationsTab\";\nimport { Button, Tabs, Dropdown, Menu } from \"antd\";\nimport { MoreOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  user: any;\n  contacts: ContactInterface[];\n  conversations: any;\n  handleSelectChat: (chat: any) => void;\n}\n\nexport default function MenuContent(props: Props) {\n  const [toFetchContacts, setToFetchContacts] = useState(false);\n  const [changingProfileImage, setChangingProfileImage] = useState(false);\n  const [profileImage, setProfileImage] = useState(\"\" as any);\n  const [loading, setLoading] = useState(false);\n\n  const { contacts, conversations, handleSelectChat, user } = props;\n  const { currentUser } = auth;\n\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"happening\");\n    storage\n      .ref()\n      .child(user.photoURL)\n      .getDownloadURL()\n      .then((url) => {\n        setProfileImage(url);\n        console.log(url);\n        console.log(user);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleChangeProfileImage = () => {\n    setChangingProfileImage(!changingProfileImage);\n  };\n\n  const handleUpdateProfileImage = (updatedImage: string) => {\n    setProfileImage(updatedImage);\n  };\n\n  const handleRemoveProfileImage = () => {\n    setProfileImage(null);\n    removeProfileImage();\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"1\" onClick={handleChangeProfileImage}>\n        Change profile image\n      </Menu.Item>\n      <Menu.Item key=\"2\" onClick={handleRemoveProfileImage}>\n        Remove profile image\n      </Menu.Item>\n      <Menu.Item key=\"3\" onClick={() => auth.signOut()}>\n        Sign out\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      {loading ? (\n        <Button\n          loading\n          shape=\"circle\"\n          style={{\n            position: \"absolute\",\n            left: \"45%\",\n            top: \"20%\",\n          }}\n        />\n      ) : (\n        <div className=\"app-container__menu__content\">\n          <header>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Button\n                onClick={() => console.log(currentUser)}\n                shape=\"circle\"\n                style={{\n                  height: \"40px\",\n                  width: \"40px\",\n                  backgroundImage: `url(${profileImage})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              >\n                {user && (\n                  <>\n                    {profileImage\n                      ? \" \"\n                      : `${user.displayName[0].toUpperCase()}`}\n                  </>\n                )}\n              </Button>\n              <span style={{ marginLeft: \"12px\", fontWeight: 500 }}>\n                {user.displayName}\n              </span>\n            </div>\n\n            <Dropdown.Button\n              overlay={menu}\n              icon={<MoreOutlined style={{ fontSize: \"1.65rem\" }} />}\n            />\n          </header>\n          <div className=\"tabs-container\">\n            <Tabs defaultActiveKey=\"1\" centered>\n              <Tabs.TabPane tab=\"Coversations\" key=\"1\">\n                <ConversationsTab\n                  contacts={contacts}\n                  conversations={conversations}\n                  handleSelectChat={handleSelectChat}\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"Contacts\" key=\"2\">\n                <ContactsTab\n                  user={user}\n                  contacts={contacts}\n                  setToFetchContacts={setToFetchContacts}\n                  toFetchContacts={toFetchContacts}\n                />\n              </Tabs.TabPane>\n            </Tabs>\n          </div>\n        </div>\n      )}\n\n      <UploadProfileImage\n        isVisible={changingProfileImage}\n        handleChangeProfileImage={handleChangeProfileImage}\n        handleUpdateProfileImage={handleUpdateProfileImage}\n      />\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx",["129","130"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { addContact, fetchContacts } from \"../../firebase/users\";\nimport { Modal, Input } from \"antd\";\n\ninterface Contacts {\n  contactName: string;\n  uid: string;\n}\n\ninterface Props {\n  contacts: Contacts[];\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n  toFetchContacts: boolean;\n  setToFetchContacts: any;\n}\n\nconst initialContactState = {\n  contactName: \"\",\n  uid: \"\",\n};\n\nexport default function CreateContact(props: Props) {\n  const [contactDetails, setContactDetails] = useState(initialContactState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const {\n    isModalVisible,\n    setIsModalVisible,\n    setToFetchContacts,\n    toFetchContacts,\n  } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setContactDetails(initialContactState);\n    setError(\"\");\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setError(\"\");\n\n    setContactDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleCreateContact = () => {\n    if (contactDetails.uid && contactDetails.contactName) {\n      setLoading(true);\n      addContact(contactDetails).then((res) => {\n        console.log(res);\n        if (res) {\n          setError(res);\n          setLoading(false);\n        } else {\n          setLoading(false);\n          handleModalHide();\n          setToFetchContacts(!toFetchContacts);\n        }\n      });\n    } else {\n      setError(\"All input fields must be filled\");\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a new contact\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={() => handleCreateContact()}\n        okText=\"Create Contact\"\n        confirmLoading={loading}\n      >\n        Enter contact's name:\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          value={contactDetails.contactName}\n          onChange={(e) => handleOnChange(e)}\n        />\n        Enter contact's id:\n        <Input\n          type=\"text\"\n          name=\"uid\"\n          value={contactDetails.uid}\n          onChange={(e) => handleOnChange(e)}\n          style={{ marginBottom: 8 }}\n        />\n        {error.length > 1 && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>{error}</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx",["131","132","133","134"],"import React, { useState, useEffect } from \"react\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { ContactInterface } from \"../../common/interfaces\";\nimport ContactCard from \"../../components/ContactCard\";\nimport SelectedContactPill from \"../../components/SelectedContactPill\";\nimport { Input, Button, Modal } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  creatingGroup: boolean;\n  contacts: ContactInterface[];\n  handleShowCreateConversation: () => void;\n  handleSelectChat: (chat?: any) => void;\n}\n\nexport default function CreateConversation(props: Props) {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedContacts, setSelectedContacts] = useState(\n    [] as ContactInterface[]\n  );\n  const [availableContacts, setAvailableContacts] = useState(\n    [] as ContactInterface[]\n  );\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const {\n    creatingGroup,\n    contacts,\n    handleShowCreateConversation,\n    handleSelectChat,\n  } = props;\n\n  useEffect(() => {\n    if (contacts) {\n      setAvailableContacts(contacts);\n    }\n  }, [contacts]);\n\n  // updated available contacts\n  useEffect(() => {\n    if (selectedContacts.length > 0 && availableContacts) {\n      var updatedAvailableContacts: ContactInterface[] = [];\n\n      availableContacts.forEach((available) => {\n        // removed selected contacts from available\n        // does available is in selectedContacts?\n        // if no add her to updatedArray\n        const wasSelected = selectedContacts.some(\n          (selected) => selected.uid === available.uid\n        );\n\n        if (!wasSelected) {\n          updatedAvailableContacts.push(available);\n        }\n      });\n      console.log(updatedAvailableContacts);\n      setAvailableContacts(updatedAvailableContacts);\n      console.log(\"also update here\");\n    }\n  }, [selectedContacts.length]);\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleModalShow = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleGroupOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value);\n  };\n\n  const handleContactOnClick = (contact: ContactInterface) => {\n    setSelectedContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleRemoveSelectedContact = (contact: ContactInterface) => {\n    const selectedContactsClone = [...selectedContacts];\n    const updatedSelectedContacts = selectedContactsClone.filter(\n      (selectedContact) => selectedContact.uid !== contact.uid\n    );\n    setSelectedContacts(updatedSelectedContacts);\n    setAvailableContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleCreateGroup = () => {\n    setError(\"\");\n    setLoading(true);\n    createGroupChat({\n      users: selectedContacts,\n      groupName: groupName,\n      isPrivate: selectedContacts.length < 1,\n    })\n      .then((res) => {\n        const groupId = res;\n        setLoading(false);\n        setIsModalVisible(false);\n        handleShowCreateConversation();\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setError(err);\n      });\n  };\n\n  let classname = \"create-conversation\";\n  if (!creatingGroup) classname += \" hide\";\n  else classname.replace(\"hide\", \"\");\n\n  return (\n    <>\n      <div className={classname}>\n        <header>\n          <div>\n            <Button\n              onClick={handleShowCreateConversation}\n              icon={<ArrowLeftOutlined style={{ fontSize: \"18px\" }} />}\n              size=\"large\"\n              type=\"text\"\n            />\n            <div>Add conversation participants</div>\n          </div>\n        </header>\n        <div className=\"search-contacts\">\n          <div className=\"search-input\">\n            {selectedContacts && (\n              <div className=\"selected-contacts\">\n                {selectedContacts.map((contact, index) => {\n                  return (\n                    <SelectedContactPill\n                      key={index}\n                      contactImage={contact.photoURL}\n                      contactName={contact.contactName}\n                      onClick={() => handleRemoveSelectedContact(contact)}\n                    />\n                  );\n                })}\n              </div>\n            )}\n            <Input\n              type=\"text\"\n              placeholder=\"Type contact name\"\n              onChange={(e) => setSearchInput(e.target.value.toLowerCase())}\n            />\n          </div>\n\n          <div className=\"contacts-list\">\n            {availableContacts?.map((contact, index) => {\n              return (\n                <ContactCard\n                  key={index}\n                  contactName={contact.contactName}\n                  contactImage={contact.photoURL}\n                  contactId={contact.uid}\n                  onClick={() => handleContactOnClick(contact)}\n                />\n              );\n            })}\n          </div>\n\n          <div className=\"create-group-section\">\n            {selectedContacts.length > 0 && (\n              <Button\n                shape=\"circle\"\n                size=\"large\"\n                style={{ height: 48, width: 48 }}\n                icon={<ArrowRightOutlined />}\n                onClick={() => handleModalShow()}\n              ></Button>\n            )}\n          </div>\n        </div>\n      </div>\n      <Modal\n        title=\"New group\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={handleCreateGroup}\n        okText=\"Create Conversation\"\n        confirmLoading={loading}\n      >\n        <Input\n          type=\"text\"\n          placeholder=\"What's the group's subject?\"\n          onChange={handleGroupOnChange}\n          style={{ marginBottom: 6 }}\n        />\n        {error && (\n          <span style={{ fontSize: \"0.8rem\", color: \"red\" }}>{error}</span>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx",["135"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx",["136"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { firestore } from \"../../firebase\";\nimport { createMessage } from \"../../firebase/messages\";\nimport {\n  deleteGroup,\n  changeGroupName,\n  removeGroupImage,\n} from \"../../firebase/groups\";\nimport ChatMessage from \"../../components/ChatMessage\";\nimport UploadConversationImage from \"../UploadConversationImage\";\nimport { Input, Button, Menu, Dropdown, Modal } from \"antd\";\nimport { MoreOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  user: any;\n  selectedChat: any;\n  contacts: any;\n  handleSelectChat: (chat: any) => void;\n}\n\nexport default function ChatRoom(props: Props) {\n  const [messageText, setMessageText] = useState(\"\");\n  const [editGroupName, setEditGroupName] = useState(false);\n  const [editGroupImage, setEditGroupImage] = useState(false);\n  const [groupName, setGroupName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const { selectedChat, handleSelectChat, contacts, user } = props;\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef\n    .where(\"groupId\", \"==\", selectedChat.id)\n    .orderBy(\"createdAt\")\n    .limit(25);\n\n  const [messages] = useCollectionData(query, {});\n  const dummy = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (dummy.current) {\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  const handleMessageOnChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    event.preventDefault();\n\n    setMessageText(event.target.value);\n  };\n\n  const handleCreateMessage = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (messageText && dummy.current) {\n      createMessage({\n        text: messageText,\n        groupId: selectedChat.id,\n      });\n      setMessageText(\"\");\n\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const handleGroupNameInputOnChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setGroupName(event.target.value);\n  };\n\n  const handleChangeNameDialog = () => {\n    setEditGroupName(!editGroupName);\n  };\n\n  const handleGroupNameChange = () => {\n    changeGroupName(selectedChat.id, groupName)\n      .then(() => {\n        setGroupName(\"\");\n        setEditGroupName(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleChangingGroupImage = () => {\n    setEditGroupImage(!editGroupImage);\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item\n        key=\"1\"\n        onClick={() => {\n          handleChangeNameDialog();\n        }}\n      >\n        Edit group name\n      </Menu.Item>\n      <Menu.Item\n        key=\"2\"\n        onClick={() => {\n          handleChangingGroupImage();\n        }}\n      >\n        Change group icon\n      </Menu.Item>\n      <Menu.Item\n        key=\"3\"\n        onClick={() => {\n          removeGroupImage(selectedChat.id);\n        }}\n      >\n        Remove group icon\n      </Menu.Item>\n      <Menu.Item\n        key=\"4\"\n        onClick={() => {\n          deleteGroup(selectedChat.id);\n          handleSelectChat(null);\n        }}\n      >\n        Exit group\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      <div className=\"chat-container\">\n        <div className=\"chat-container__background\">\n          <header>\n            <div\n              className=\"image\"\n              style={{\n                backgroundImage: `url('${selectedChat.photoURL}')`,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n              }}\n            >\n              {selectedChat.photoURL ? \"\" : selectedChat.groupName[0]}\n            </div>\n            <span>{selectedChat.groupName}</span>\n            <Dropdown.Button\n              overlay={menu}\n              icon={<MoreOutlined style={{ fontSize: \"1.65rem\" }} />}\n            />\n          </header>\n          <main>\n            <div>\n              {messages?.map((msg: any, index) => {\n                return (\n                  <ChatMessage\n                    key={index}\n                    text={msg.text}\n                    createdBy={msg.createdBy}\n                    createdAt={msg.createdAt}\n                    contacts={contacts}\n                    user={user}\n                  />\n                );\n              })}\n              <div ref={dummy} />\n            </div>\n          </main>\n          <footer>\n            <form onSubmit={(e) => e.preventDefault()}>\n              <Input\n                type=\"text\"\n                value={messageText}\n                placeholder=\"Type a message\"\n                onChange={handleMessageOnChange}\n              />\n              <Button onClick={handleCreateMessage}>Send message</Button>\n            </form>\n          </footer>\n        </div>\n      </div>\n      <Modal\n        title=\"New Conversation Subject\"\n        visible={editGroupName}\n        onCancel={handleChangeNameDialog}\n        onOk={handleGroupNameChange}\n        okText=\"Change Subject\"\n        confirmLoading={loading}\n      >\n        <Input\n          type=\"text\"\n          placeholder={selectedChat.groupName}\n          style={{ marginBottom: 6 }}\n          onChange={handleGroupNameInputOnChange}\n        />\n      </Modal>\n\n      <UploadConversationImage\n        selectedChat={selectedChat}\n        isVisible={editGroupImage}\n        handleChangingGroupImage={handleChangingGroupImage}\n      />\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx",["137","138"],"import { useEffect, useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport \"./styles.scss\";\n\ninterface Props {\n  text: string;\n  createdBy: string;\n  createdAt?: any;\n  contacts?: any;\n  user?: any;\n}\n\nexport default function ChatMessage(props: Props) {\n  const [senderName, setSenderName] = useState(null as any);\n  const { text, createdBy, createdAt, contacts, user } = props;\n\n  const messageType = createdBy === auth.currentUser?.uid ? \"sent\" : \"received\";\n\n  useEffect(() => {\n    const contact = contacts.find((elem: any) => elem.uid == createdBy);\n\n    if (contact) {\n      setSenderName(contact.contactName);\n    } else if (createdBy !== auth.currentUser?.uid) {\n      setSenderName(createdBy);\n    } else {\n      setSenderName(user.displayName);\n    }\n  }, []);\n\n  return (\n    <>\n      {createdAt && (\n        <div className={`message ${messageType}`}>\n          <div className=\"message__content\">\n            <div className=\"message__content__sender\">{senderName}</div>\n            <div className=\"message__content__text\">{text}</div>\n            <p className=\"message__content__at\">\n              {createdAt && toDateTime(createdAt.seconds)}\n            </p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction toDateTime(secs: number) {\n  var t = new Date(0); // Epoch\n  t.setUTCSeconds(secs);\n  var hours = t.getHours();\n  var minutes = t.getMinutes();\n\n  return (\n    <span>\n      {hours > 9 ? hours : <>0{hours}</>}:\n      {minutes > 9 ? minutes : <>0{minutes}</>}\n    </span>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx",["139"],"import React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  conversationName: string;\n  conversationId: string;\n  conversationImage: string;\n  onClick?: () => void;\n}\n\nexport default function ConversationCard(props: Props) {\n  const {\n    conversationName,\n    conversationImage,\n    conversationId,\n    onClick,\n  } = props;\n  return (\n    <div className=\"conversation-card\" onClick={onClick}>\n      <div className=\"conversation-card__image\">\n        <div\n          style={{\n            backgroundImage: `url('${conversationImage}')`,\n            backgroundSize: \"cover\",\n          }}\n        >\n          {conversationImage ? \"\" : conversationName[0]}\n        </div>\n      </div>\n      <div className=\"conversation-card__name\">{conversationName}</div>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadConversationImage/index.tsx",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":22},{"ruleId":"144","severity":1,"message":"148","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":27},{"ruleId":"149","severity":1,"message":"150","line":41,"column":6,"nodeType":"151","endLine":41,"endColumn":21,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":40,"column":7,"nodeType":"155","messageId":"156","endLine":40,"endColumn":81},{"ruleId":"153","severity":1,"message":"154","line":62,"column":11,"nodeType":"155","messageId":"156","endLine":62,"endColumn":52},{"ruleId":"144","severity":1,"message":"157","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":14},{"ruleId":"144","severity":1,"message":"158","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":25},{"ruleId":"144","severity":1,"message":"159","line":6,"column":11,"nodeType":"146","messageId":"147","endLine":6,"endColumn":21},{"ruleId":"140","replacedBy":"160"},{"ruleId":"142","replacedBy":"161"},{"ruleId":"149","severity":1,"message":"162","line":45,"column":6,"nodeType":"151","endLine":45,"endColumn":8,"suggestions":"163"},{"ruleId":"144","severity":1,"message":"157","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":14},{"ruleId":"144","severity":1,"message":"164","line":3,"column":22,"nodeType":"146","messageId":"147","endLine":3,"endColumn":35},{"ruleId":"144","severity":1,"message":"165","line":25,"column":10,"nodeType":"146","messageId":"147","endLine":25,"endColumn":21},{"ruleId":"144","severity":1,"message":"166","line":34,"column":5,"nodeType":"146","messageId":"147","endLine":34,"endColumn":21},{"ruleId":"149","severity":1,"message":"167","line":64,"column":6,"nodeType":"151","endLine":64,"endColumn":31,"suggestions":"168"},{"ruleId":"144","severity":1,"message":"169","line":100,"column":15,"nodeType":"146","messageId":"147","endLine":100,"endColumn":22},{"ruleId":"144","severity":1,"message":"170","line":13,"column":24,"nodeType":"146","messageId":"147","endLine":13,"endColumn":33},{"ruleId":"144","severity":1,"message":"171","line":28,"column":19,"nodeType":"146","messageId":"147","endLine":28,"endColumn":29},{"ruleId":"172","severity":1,"message":"173","line":20,"column":59,"nodeType":"174","messageId":"175","endLine":20,"endColumn":61},{"ruleId":"149","severity":1,"message":"176","line":29,"column":6,"nodeType":"151","endLine":29,"endColumn":8,"suggestions":"177"},{"ruleId":"144","severity":1,"message":"178","line":15,"column":5,"nodeType":"146","messageId":"147","endLine":15,"endColumn":19},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'useAuthState' is defined but never used.","Identifier","unusedVar","'useCollectionData' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedChat'. Either include it or remove the dependency array.","ArrayExpression",["181"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'auth' is defined but never used.","'createGroupChat' is defined but never used.","'GroupUsers' is defined but never used.",["179"],["180"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["182"],"'fetchContacts' is defined but never used.","'searchInput' is assigned a value but never used.","'handleSelectChat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'availableContacts' and 'selectedContacts'. Either include them or remove the dependency array.",["183"],"'groupId' is assigned a value but never used.","'contactId' is assigned a value but never used.","'setLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contacts', 'createdBy', and 'user.displayName'. Either include them or remove the dependency array.",["184"],"'conversationId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [conversations, selectedChat]",{"range":"193","text":"194"},"Update the dependencies array to be: [user]",{"range":"195","text":"196"},"Update the dependencies array to be: [availableContacts, selectedContacts, selectedContacts.length]",{"range":"197","text":"198"},"Update the dependencies array to be: [contacts, createdBy, user.displayName]",{"range":"199","text":"200"},[1181,1196],"[conversations, selectedChat]",[1416,1418],"[user]",[2064,2089],"[availableContacts, selectedContacts, selectedContacts.length]",[782,784],"[contacts, createdBy, user.displayName]"]