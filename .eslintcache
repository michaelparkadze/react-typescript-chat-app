[{"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx":"1","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts":"2","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx":"3","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx":"4","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts":"5","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx":"6","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx":"7","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx":"8","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx":"9","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts":"10","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx":"11","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts":"12","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx":"13","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx":"14","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx":"15","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx":"16","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx":"17","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx":"18","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx":"19","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx":"20","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts":"21","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx":"22","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx":"23","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx":"24","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx":"25","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadConversationImage/index.tsx":"26","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/EditContact/index.tsx":"27"},{"size":592,"mtime":1611919771027,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1611828545235,"results":"30","hashOfConfig":"29"},{"size":93,"mtime":1614879451154,"results":"31","hashOfConfig":"29"},{"size":4418,"mtime":1614882266981,"results":"32","hashOfConfig":"29"},{"size":637,"mtime":1614877809477,"results":"33","hashOfConfig":"29"},{"size":1929,"mtime":1614879381286,"results":"34","hashOfConfig":"29"},{"size":441,"mtime":1614879699300,"results":"35","hashOfConfig":"29"},{"size":3550,"mtime":1614879691517,"results":"36","hashOfConfig":"29"},{"size":378,"mtime":1614530256648,"results":"37","hashOfConfig":"29"},{"size":2966,"mtime":1614789220141,"results":"38","hashOfConfig":"29"},{"size":2245,"mtime":1612523596741,"results":"39","hashOfConfig":"29"},{"size":6317,"mtime":1614879850339,"results":"40","hashOfConfig":"29"},{"size":4881,"mtime":1614874201570,"results":"41","hashOfConfig":"29"},{"size":2703,"mtime":1614879888362,"results":"42","hashOfConfig":"29"},{"size":2456,"mtime":1614861448588,"results":"43","hashOfConfig":"29"},{"size":1530,"mtime":1614779002628,"results":"44","hashOfConfig":"29"},{"size":6092,"mtime":1614869271288,"results":"45","hashOfConfig":"29"},{"size":1451,"mtime":1614868509948,"results":"46","hashOfConfig":"29"},{"size":824,"mtime":1614439587089,"results":"47","hashOfConfig":"29"},{"size":5501,"mtime":1614789246130,"results":"48","hashOfConfig":"29"},{"size":560,"mtime":1614624937168,"results":"49","hashOfConfig":"29"},{"size":1530,"mtime":1614790542109,"results":"50","hashOfConfig":"29"},{"size":783,"mtime":1614788164641,"results":"51","hashOfConfig":"29"},{"size":1885,"mtime":1614782740920,"results":"52","hashOfConfig":"29"},{"size":2157,"mtime":1614529622538,"results":"53","hashOfConfig":"29"},{"size":2053,"mtime":1614787898472,"results":"54","hashOfConfig":"29"},{"size":1329,"mtime":1614867282110,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1vos0jp",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx",[],["117","118"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx",["119"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts",["120","121"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx",["122","123","124"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { Modal, Input } from \"antd\";\n\ninterface GroupUsers {\n  uid: string;\n}\n\ninterface Props {\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n}\n\nexport default function CreateGroup(props: Props) {\n  const [groupName, setGroupName] = useState(\"\");\n  const [userToAdd, setUserToAdd] = useState(\"\");\n  const [groupUsers, setGroupUsers] = useState([] as string[]);\n\n  const { isModalVisible, setIsModalVisible } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setGroupName(\"\");\n    setUserToAdd(\"\");\n    setGroupUsers([]);\n  };\n\n  const handleGroupNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setGroupName(event.target.value);\n  };\n\n  const handleUserToAddInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setUserToAdd(event.target.value);\n  };\n\n  const handleAddUserToGroup = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    // Check if enter was pressed\n    if (event.key === \"Enter\") {\n      if (userToAdd.length > 1) {\n        setGroupUsers((prevState) => [...prevState, userToAdd]);\n        setUserToAdd(\"\");\n      }\n    }\n  };\n\n  // const handleCreateGroup = (users: GroupUsers[]) => {\n  //   if (auth.currentUser) {\n  //     createGroupChat({\n  //       users: users,\n  //       createdBy: auth.currentUser.uid,\n  //       groupName: groupName,\n  //       isPrivate: users.length > 2,\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a Group Chat\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        // onOk={() => handleCreateGroup([{ uid: \"hello\" }])}\n        okText=\"Create Group\"\n      >\n        Enter group name:\n        <Input type=\"text\" value={groupName} onChange={handleGroupNameInput} />\n        Enter user email to add to group:\n        <Input\n          type=\"text\"\n          value={userToAdd}\n          onChange={handleUserToAddInput}\n          onKeyPress={handleAddUserToGroup}\n        />\n        Group users\n        <span>{JSON.stringify(groupUsers)}</span>\n      </Modal>\n    </>\n  );\n}\n",["125","126"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts",["127","128","129","130","131"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx",["132"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx",["133"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx",["134"],"import React, { useState } from \"react\";\nimport { addContact } from \"../../firebase/users\";\nimport { Modal, Input } from \"antd\";\n\ninterface Contacts {\n  contactName: string;\n  uid: string;\n}\n\ninterface Props {\n  contacts: Contacts[];\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n  toFetchContacts: boolean;\n  setToFetchContacts: any;\n  handleAddContact: any;\n}\n\nconst initialContactState = {\n  contactName: \"\",\n  uid: \"\",\n};\n\nexport default function CreateContact(props: Props) {\n  const [contactDetails, setContactDetails] = useState(initialContactState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const { isModalVisible, setIsModalVisible, handleAddContact } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setContactDetails(initialContactState);\n    setError(\"\");\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setError(\"\");\n\n    setContactDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleCreateContact = async () => {\n    if (contactDetails.uid && contactDetails.contactName) {\n      setLoading(true);\n      await handleAddContact(contactDetails.uid, contactDetails.contactName)\n        .then((res: any) => {\n          setLoading(false);\n          setIsModalVisible(false);\n          setContactDetails(initialContactState);\n        })\n        .catch((err: any) => {\n          setError(err);\n          setLoading(false);\n        });\n    } else {\n      setError(\"All input fields must be filled\");\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a new contact\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={() => handleCreateContact()}\n        okText=\"Create Contact\"\n        confirmLoading={loading}\n      >\n        Enter contact's name:\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          value={contactDetails.contactName}\n          onChange={(e) => handleOnChange(e)}\n        />\n        Enter contact's id:\n        <Input\n          type=\"text\"\n          name=\"uid\"\n          value={contactDetails.uid}\n          onChange={(e) => handleOnChange(e)}\n          style={{ marginBottom: 8 }}\n        />\n        {error.length > 1 && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>{error}</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx",["135","136","137","138"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx",["139"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { firestore } from \"../../firebase\";\nimport { createMessage } from \"../../firebase/messages\";\nimport {\n  deleteGroup,\n  changeGroupName,\n  removeGroupImage,\n} from \"../../firebase/groups\";\nimport ChatMessage from \"../../components/ChatMessage\";\nimport UploadConversationImage from \"../UploadConversationImage\";\nimport { Input, Button, Menu, Dropdown, Modal } from \"antd\";\nimport { MoreOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  user: any;\n  selectedChat: any;\n  contacts: any;\n  handleSelectChat: (chat: any) => void;\n}\n\nexport default function ChatRoom(props: Props) {\n  const [messageText, setMessageText] = useState(\"\");\n  const [editGroupName, setEditGroupName] = useState(false);\n  const [editGroupImage, setEditGroupImage] = useState(false);\n  const [groupName, setGroupName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const { selectedChat, handleSelectChat, contacts, user } = props;\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef\n    .where(\"groupId\", \"==\", selectedChat.id)\n    .orderBy(\"createdAt\")\n    .limit(25);\n\n  const [messages] = useCollectionData(query, {});\n  const dummy = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (dummy.current) {\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  const handleMessageOnChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    event.preventDefault();\n\n    setMessageText(event.target.value);\n  };\n\n  const handleCreateMessage = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (messageText && dummy.current) {\n      createMessage({\n        text: messageText,\n        groupId: selectedChat.id,\n      });\n      setMessageText(\"\");\n\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const handleGroupNameInputOnChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setGroupName(event.target.value);\n  };\n\n  const handleChangeNameDialog = () => {\n    setEditGroupName(!editGroupName);\n  };\n\n  const handleGroupNameChange = () => {\n    changeGroupName(selectedChat.id, groupName)\n      .then(() => {\n        setGroupName(\"\");\n        setEditGroupName(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleChangingGroupImage = () => {\n    setEditGroupImage(!editGroupImage);\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item\n        key=\"1\"\n        onClick={() => {\n          handleChangeNameDialog();\n        }}\n      >\n        Edit group name\n      </Menu.Item>\n      <Menu.Item\n        key=\"2\"\n        onClick={() => {\n          handleChangingGroupImage();\n        }}\n      >\n        Change group icon\n      </Menu.Item>\n      <Menu.Item\n        key=\"3\"\n        onClick={() => {\n          removeGroupImage(selectedChat.id);\n        }}\n      >\n        Remove group icon\n      </Menu.Item>\n      <Menu.Item\n        key=\"4\"\n        onClick={() => {\n          deleteGroup(selectedChat.id);\n          handleSelectChat(null);\n        }}\n      >\n        Exit group\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      <div className=\"chat-container\">\n        <div className=\"chat-container__background\">\n          <header>\n            <div\n              className=\"image\"\n              style={{\n                backgroundImage: `url('${selectedChat.photoURL}')`,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n              }}\n            >\n              {selectedChat.photoURL ? \"\" : selectedChat.groupName[0]}\n            </div>\n            <span>{selectedChat.groupName}</span>\n            <Dropdown.Button\n              overlay={menu}\n              icon={<MoreOutlined style={{ fontSize: \"1.65rem\" }} />}\n            />\n          </header>\n          <main>\n            <div>\n              {messages?.map((msg: any, index) => {\n                return (\n                  <ChatMessage\n                    key={index}\n                    text={msg.text}\n                    createdBy={msg.createdBy}\n                    createdAt={msg.createdAt}\n                    contacts={contacts}\n                    user={user}\n                  />\n                );\n              })}\n              <div ref={dummy} />\n            </div>\n          </main>\n          <footer>\n            <form onSubmit={(e) => e.preventDefault()}>\n              <Input\n                type=\"text\"\n                value={messageText}\n                placeholder=\"Type a message\"\n                onChange={handleMessageOnChange}\n              />\n              <Button onClick={handleCreateMessage}>Send message</Button>\n            </form>\n          </footer>\n        </div>\n      </div>\n      <Modal\n        title=\"New Conversation Subject\"\n        visible={editGroupName}\n        onCancel={handleChangeNameDialog}\n        onOk={handleGroupNameChange}\n        okText=\"Change Subject\"\n        confirmLoading={loading}\n      >\n        <Input\n          type=\"text\"\n          placeholder={selectedChat.groupName}\n          style={{ marginBottom: 6 }}\n          onChange={handleGroupNameInputOnChange}\n        />\n      </Modal>\n\n      <UploadConversationImage\n        selectedChat={selectedChat}\n        isVisible={editGroupImage}\n        handleChangingGroupImage={handleChangingGroupImage}\n      />\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx",["140","141"],"import { useEffect, useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport \"./styles.scss\";\n\ninterface Props {\n  text: string;\n  createdBy: string;\n  createdAt?: any;\n  contacts?: any;\n  user?: any;\n}\n\nexport default function ChatMessage(props: Props) {\n  const [senderName, setSenderName] = useState(null as any);\n  const { text, createdBy, createdAt, contacts, user } = props;\n\n  const messageType = createdBy === auth.currentUser?.uid ? \"sent\" : \"received\";\n\n  useEffect(() => {\n    const contact = contacts.find((elem: any) => elem.uid == createdBy);\n\n    if (contact) {\n      setSenderName(contact.contactName);\n    } else if (createdBy !== auth.currentUser?.uid) {\n      setSenderName(createdBy);\n    } else {\n      setSenderName(user.displayName);\n    }\n  }, []);\n\n  return (\n    <>\n      {createdAt && (\n        <div className={`message ${messageType}`}>\n          <div className=\"message__content\">\n            <div className=\"message__content__sender\">{senderName}</div>\n            <div className=\"message__content__text\">{text}</div>\n            <p className=\"message__content__at\">\n              {createdAt && toDateTime(createdAt.seconds)}\n            </p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction toDateTime(secs: number) {\n  var t = new Date(0); // Epoch\n  t.setUTCSeconds(secs);\n  var hours = t.getHours();\n  var minutes = t.getMinutes();\n\n  return (\n    <span>\n      {hours > 9 ? hours : <>0{hours}</>}:\n      {minutes > 9 ? minutes : <>0{minutes}</>}\n    </span>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx",["142"],"import React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  conversationName: string;\n  conversationId: string;\n  conversationImage: string;\n  onClick?: () => void;\n}\n\nexport default function ConversationCard(props: Props) {\n  const {\n    conversationName,\n    conversationImage,\n    conversationId,\n    onClick,\n  } = props;\n  return (\n    <div className=\"conversation-card\" onClick={onClick}>\n      <div className=\"conversation-card__image\">\n        <div\n          style={{\n            backgroundImage: `url('${conversationImage}')`,\n            backgroundSize: \"cover\",\n          }}\n        >\n          {conversationImage ? \"\" : conversationName[0]}\n        </div>\n      </div>\n      <div className=\"conversation-card__name\">{conversationName}</div>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadProfileImage/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignIn/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/UploadConversationImage/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/EditContact/index.tsx",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":37,"column":6,"nodeType":"149","endLine":37,"endColumn":21,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":40,"column":7,"nodeType":"153","messageId":"154","endLine":40,"endColumn":81},{"ruleId":"151","severity":1,"message":"152","line":62,"column":11,"nodeType":"153","messageId":"154","endLine":62,"endColumn":52},{"ruleId":"155","severity":1,"message":"156","line":2,"column":10,"nodeType":"157","messageId":"158","endLine":2,"endColumn":14},{"ruleId":"155","severity":1,"message":"159","line":3,"column":10,"nodeType":"157","messageId":"158","endLine":3,"endColumn":25},{"ruleId":"155","severity":1,"message":"160","line":6,"column":11,"nodeType":"157","messageId":"158","endLine":6,"endColumn":21},{"ruleId":"143","replacedBy":"161"},{"ruleId":"145","replacedBy":"162"},{"ruleId":"151","severity":1,"message":"152","line":153,"column":17,"nodeType":"153","messageId":"154","endLine":153,"endColumn":51},{"ruleId":"151","severity":1,"message":"152","line":156,"column":13,"nodeType":"153","messageId":"154","endLine":156,"endColumn":44},{"ruleId":"151","severity":1,"message":"152","line":159,"column":11,"nodeType":"153","messageId":"154","endLine":159,"endColumn":44},{"ruleId":"151","severity":1,"message":"152","line":164,"column":9,"nodeType":"153","messageId":"154","endLine":164,"endColumn":43},{"ruleId":"151","severity":1,"message":"152","line":238,"column":11,"nodeType":"153","messageId":"154","endLine":238,"endColumn":41},{"ruleId":"147","severity":1,"message":"163","line":60,"column":6,"nodeType":"149","endLine":60,"endColumn":8,"suggestions":"164"},{"ruleId":"155","severity":1,"message":"165","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":36},{"ruleId":"155","severity":1,"message":"166","line":2,"column":10,"nodeType":"157","messageId":"158","endLine":2,"endColumn":20},{"ruleId":"155","severity":1,"message":"167","line":34,"column":5,"nodeType":"157","messageId":"158","endLine":34,"endColumn":21},{"ruleId":"147","severity":1,"message":"168","line":64,"column":6,"nodeType":"149","endLine":64,"endColumn":31,"suggestions":"169"},{"ruleId":"155","severity":1,"message":"170","line":100,"column":15,"nodeType":"157","messageId":"158","endLine":100,"endColumn":22},{"ruleId":"171","severity":1,"message":"172","line":154,"column":54,"nodeType":"173","messageId":"174","endLine":154,"endColumn":56},{"ruleId":"155","severity":1,"message":"175","line":28,"column":19,"nodeType":"157","messageId":"158","endLine":28,"endColumn":29},{"ruleId":"176","severity":1,"message":"177","line":20,"column":59,"nodeType":"178","messageId":"179","endLine":20,"endColumn":61},{"ruleId":"147","severity":1,"message":"180","line":29,"column":6,"nodeType":"149","endLine":29,"endColumn":8,"suggestions":"181"},{"ruleId":"155","severity":1,"message":"182","line":15,"column":5,"nodeType":"157","messageId":"158","endLine":15,"endColumn":19},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedChat'. Either include it or remove the dependency array.","ArrayExpression",["185"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","@typescript-eslint/no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","'createGroupChat' is defined but never used.","'GroupUsers' is defined but never used.",["183"],["184"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["186"],"'useEffect' is defined but never used.","'addContact' is defined but never used.","'handleSelectChat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'availableContacts' and 'selectedContacts'. Either include them or remove the dependency array.",["187"],"'groupId' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contacts', 'createdBy', and 'user.displayName'. Either include them or remove the dependency array.",["188"],"'conversationId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [conversations, selectedChat]",{"range":"197","text":"198"},"Update the dependencies array to be: [user]",{"range":"199","text":"200"},"Update the dependencies array to be: [availableContacts, selectedContacts, selectedContacts.length]",{"range":"201","text":"202"},"Update the dependencies array to be: [contacts, createdBy, user.displayName]",{"range":"203","text":"204"},[1060,1075],"[conversations, selectedChat]",[1774,1776],"[user]",[2064,2089],"[availableContacts, selectedContacts, selectedContacts.length]",[782,784],"[contacts, createdBy, user.displayName]"]