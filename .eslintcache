[{"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx":"1","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts":"2","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx":"3","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx":"4","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts":"5","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx":"6","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx":"7","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx":"8","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx":"9","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts":"10","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx":"11","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts":"12","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx":"13","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx":"14","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx":"15","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx":"16","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx":"17","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx":"18","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx":"19","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx":"20","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts":"21","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx":"22","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx":"23"},{"size":592,"mtime":1611919771027,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1611828545235,"results":"26","hashOfConfig":"25"},{"size":220,"mtime":1611910854590,"results":"27","hashOfConfig":"25"},{"size":2882,"mtime":1611912963526,"results":"28","hashOfConfig":"25"},{"size":548,"mtime":1611843289920,"results":"29","hashOfConfig":"25"},{"size":477,"mtime":1611910667212,"results":"30","hashOfConfig":"25"},{"size":914,"mtime":1611909507590,"results":"31","hashOfConfig":"25"},{"size":789,"mtime":1614170096866,"results":"32","hashOfConfig":"25"},{"size":876,"mtime":1611910486601,"results":"33","hashOfConfig":"25"},{"size":1384,"mtime":1612540997619,"results":"34","hashOfConfig":"25"},{"size":2245,"mtime":1612523596741,"results":"35","hashOfConfig":"25"},{"size":2133,"mtime":1612541890674,"results":"36","hashOfConfig":"25"},{"size":2771,"mtime":1614170139347,"results":"37","hashOfConfig":"25"},{"size":1204,"mtime":1612524576530,"results":"38","hashOfConfig":"25"},{"size":2478,"mtime":1612525331505,"results":"39","hashOfConfig":"25"},{"size":1435,"mtime":1614173951471,"results":"40","hashOfConfig":"25"},{"size":5451,"mtime":1612525567161,"results":"41","hashOfConfig":"25"},{"size":483,"mtime":1612015718334,"results":"42","hashOfConfig":"25"},{"size":689,"mtime":1612447724900,"results":"43","hashOfConfig":"25"},{"size":2433,"mtime":1614170612662,"results":"44","hashOfConfig":"25"},{"size":587,"mtime":1612619888162,"results":"45","hashOfConfig":"25"},{"size":927,"mtime":1614172624255,"results":"46","hashOfConfig":"25"},{"size":533,"mtime":1614173688907,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1vos0jp",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/index.tsx",[],["100","101"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/reportWebVitals.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/App.tsx",["102","103"],"import Routes from \"./routes\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/SignUp/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/index.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PrivateRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/views/Chat/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/routes/PublicRoute.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/groups.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateGroup/index.tsx",["104","105","106"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { Modal, Input } from \"antd\";\n\ninterface GroupUsers {\n  uid: string;\n}\n\ninterface Props {\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n}\n\nexport default function CreateGroup(props: Props) {\n  const [groupName, setGroupName] = useState(\"\");\n  const [userToAdd, setUserToAdd] = useState(\"\");\n  const [groupUsers, setGroupUsers] = useState([] as string[]);\n\n  const { isModalVisible, setIsModalVisible } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setGroupName(\"\");\n    setUserToAdd(\"\");\n    setGroupUsers([]);\n  };\n\n  const handleGroupNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setGroupName(event.target.value);\n  };\n\n  const handleUserToAddInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setUserToAdd(event.target.value);\n  };\n\n  const handleAddUserToGroup = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    // Check if enter was pressed\n    if (event.key === \"Enter\") {\n      if (userToAdd.length > 1) {\n        setGroupUsers((prevState) => [...prevState, userToAdd]);\n        setUserToAdd(\"\");\n      }\n    }\n  };\n\n  // const handleCreateGroup = (users: GroupUsers[]) => {\n  //   if (auth.currentUser) {\n  //     createGroupChat({\n  //       users: users,\n  //       createdBy: auth.currentUser.uid,\n  //       groupName: groupName,\n  //       isPrivate: users.length > 2,\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a Group Chat\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        // onOk={() => handleCreateGroup([{ uid: \"hello\" }])}\n        okText=\"Create Group\"\n      >\n        Enter group name:\n        <Input type=\"text\" value={groupName} onChange={handleGroupNameInput} />\n        Enter user email to add to group:\n        <Input\n          type=\"text\"\n          value={userToAdd}\n          onChange={handleUserToAddInput}\n          onKeyPress={handleAddUserToGroup}\n        />\n        Group users\n        <span>{JSON.stringify(groupUsers)}</span>\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/users.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/Menu/index.tsx",["107","108"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ContactsTab/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateContact/index.tsx",["109","110"],"import React, { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { addContact, fetchContacts } from \"../../firebase/users\";\nimport { Modal, Input } from \"antd\";\n\ninterface Contacts {\n  contactName: string;\n  uid: string;\n}\n\ninterface Props {\n  contacts: Contacts[];\n  isModalVisible: boolean;\n  setIsModalVisible: any;\n  toFetchContacts: boolean;\n  setToFetchContacts: any;\n}\n\nconst initialContactState = {\n  contactName: \"\",\n  uid: \"\",\n};\n\nexport default function CreateContact(props: Props) {\n  const [contactDetails, setContactDetails] = useState(initialContactState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const {\n    isModalVisible,\n    setIsModalVisible,\n    setToFetchContacts,\n    toFetchContacts,\n  } = props;\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n    setContactDetails(initialContactState);\n    setError(\"\");\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setError(\"\");\n\n    setContactDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleCreateContact = () => {\n    if (contactDetails.uid && contactDetails.contactName) {\n      setLoading(true);\n      addContact(contactDetails).then((res) => {\n        console.log(res);\n        if (res) {\n          setError(res);\n          setLoading(false);\n        } else {\n          setLoading(false);\n          handleModalHide();\n          setToFetchContacts(!toFetchContacts);\n        }\n      });\n    } else {\n      setError(\"All input fields must be filled\");\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        title=\"Create a new contact\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={() => handleCreateContact()}\n        okText=\"Create Contact\"\n        confirmLoading={loading}\n      >\n        Enter contact's name:\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          value={contactDetails.contactName}\n          onChange={(e) => handleOnChange(e)}\n        />\n        Enter contact's id:\n        <Input\n          type=\"text\"\n          name=\"uid\"\n          value={contactDetails.uid}\n          onChange={(e) => handleOnChange(e)}\n          style={{ marginBottom: 8 }}\n        />\n        {error.length > 1 && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>{error}</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ConversationsTab/index.tsx",["111"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/CreateConversation/index.tsx",["112","113","114","115","116","117","118","119","120"],"import React, { useState, useEffect } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { addContact, fetchContacts } from \"../../firebase/users\";\nimport { createGroupChat } from \"../../firebase/groups\";\nimport { Input, Button, Modal } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\n\nimport ContactCard from \"../../components/ContactCard\";\nimport \"./styles.scss\";\nimport SelectedContactPill from \"../../components/SelectedContactPill\";\n\ninterface Contact {\n  contactName: string;\n  uid: string;\n}\n\ninterface Props {\n  creatingGroup: boolean;\n  contacts: Contact[];\n  handleShowCreateConversation: () => void;\n}\n\nexport default function CreateConversation(props: Props) {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [selectedContacts, setSelectedContacts] = useState([] as Contact[]);\n  const [availableContacts, setAvailableContacts] = useState([] as Contact[]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const { creatingGroup, contacts, handleShowCreateConversation } = props;\n\n  useEffect(() => {\n    if (contacts) {\n      setAvailableContacts(contacts);\n    }\n  }, [contacts]);\n\n  // updated available contacts\n  useEffect(() => {\n    if (selectedContacts.length > 0 && availableContacts) {\n      var updatedAvailableContacts: Contact[] = [];\n\n      availableContacts.forEach((available) => {\n        // removed selected contacts from available\n        // does available is in selectedContacts?\n        // if no add her to updatedArray\n        const wasSelected = selectedContacts.some(\n          (selected) => selected.uid === available.uid\n        );\n\n        if (!wasSelected) {\n          updatedAvailableContacts.push(available);\n        }\n      });\n      console.log(updatedAvailableContacts);\n      setAvailableContacts(updatedAvailableContacts);\n      console.log(\"also update here\");\n    }\n  }, [selectedContacts.length]);\n\n  const handleModalHide = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleModalShow = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleGroupOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value);\n  };\n\n  const handleContactOnClick = (contact: Contact) => {\n    setSelectedContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleRemoveSelectedContact = (contact: Contact) => {\n    const selectedContactsClone = [...selectedContacts];\n    const updatedSelectedContacts = selectedContactsClone.filter(\n      (selectedContact) => selectedContact.uid !== contact.uid\n    );\n    setSelectedContacts(updatedSelectedContacts);\n    setAvailableContacts((prevState) => [...prevState, contact]);\n  };\n\n  const handleCreateGroup = () => {\n    createGroupChat({\n      users: selectedContacts,\n      groupName: groupName,\n      isPrivate: selectedContacts.length < 1,\n    });\n  };\n\n  let classname = \"create-conversation\";\n  if (!creatingGroup) classname += \" hide\";\n  else classname.replace(\"hide\", \"\");\n\n  return (\n    <>\n      <div className={classname}>\n        <header>\n          <div>\n            <Button\n              onClick={handleShowCreateConversation}\n              icon={<ArrowLeftOutlined style={{ fontSize: \"18px\" }} />}\n              size=\"large\"\n              type=\"text\"\n            />\n            <div>Add conversation participants</div>\n          </div>\n        </header>\n        <div className=\"search-contacts\">\n          <div className=\"search-input\">\n            {selectedContacts && (\n              <div className=\"selected-contacts\">\n                {selectedContacts.map((contact, index) => {\n                  return (\n                    <SelectedContactPill\n                      key={index}\n                      contactName={contact.contactName}\n                      onClick={() => handleRemoveSelectedContact(contact)}\n                    />\n                  );\n                })}\n              </div>\n            )}\n            <Input\n              type=\"text\"\n              placeholder=\"Type contact name\"\n              onChange={(e) => setSearchInput(e.target.value.toLowerCase())}\n            />\n          </div>\n\n          <div className=\"contacts-list\">\n            {availableContacts?.map((contact, index) => {\n              return (\n                <ContactCard\n                  key={index}\n                  contactName={contact.contactName}\n                  contactId={contact.uid}\n                  onClick={() => handleContactOnClick(contact)}\n                />\n              );\n            })}\n          </div>\n\n          <div className=\"create-group-section\">\n            {selectedContacts.length > 0 && (\n              <Button\n                shape=\"circle\"\n                size=\"large\"\n                style={{ height: 48, width: 48 }}\n                icon={<ArrowRightOutlined />}\n                onClick={() => handleModalShow()}\n              ></Button>\n            )}\n          </div>\n        </div>\n      </div>\n      <Modal\n        title=\"New group\"\n        visible={isModalVisible}\n        onCancel={handleModalHide}\n        onOk={handleCreateGroup}\n        okText=\"Create Group\"\n      >\n        <Input\n          type=\"text\"\n          placeholder=\"What's the group's subject?\"\n          onChange={handleGroupOnChange}\n        />\n      </Modal>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ContactCard/index.tsx",["121"],"import React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  contactName: string;\n  contactId: string;\n  onClick?: () => void;\n}\n\nexport default function ContactCard(props: Props) {\n  const { contactName, contactId, onClick } = props;\n  return (\n    <div className=\"contact-card\" onClick={onClick}>\n      <div className=\"contact-card__image\">\n        <div>{contactName[0]}</div>\n      </div>\n      <div className=\"contact-card__name\">{contactName}</div>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/SelectedContactPill/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/containers/ChatRoom/index.tsx",["122"],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/firebase/messages.ts",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ChatMessage/index.tsx",[],"/Users/michaelparkadze/Repos/react-typescript-chat-app/src/components/ConversationCard/index.tsx",["123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":22},{"ruleId":"128","severity":1,"message":"132","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":27},{"ruleId":"128","severity":1,"message":"133","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"134","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":25},{"ruleId":"128","severity":1,"message":"135","line":6,"column":11,"nodeType":"130","messageId":"131","endLine":6,"endColumn":21},{"ruleId":"128","severity":1,"message":"136","line":3,"column":18,"nodeType":"130","messageId":"131","endLine":3,"endColumn":23},{"ruleId":"128","severity":1,"message":"137","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":20},{"ruleId":"128","severity":1,"message":"133","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"138","line":3,"column":22,"nodeType":"130","messageId":"131","endLine":3,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":21},{"ruleId":"128","severity":1,"message":"133","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"140","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":20},{"ruleId":"128","severity":1,"message":"138","line":3,"column":22,"nodeType":"130","messageId":"131","endLine":3,"endColumn":35},{"ruleId":"128","severity":1,"message":"141","line":27,"column":10,"nodeType":"130","messageId":"131","endLine":27,"endColumn":21},{"ruleId":"128","severity":1,"message":"142","line":29,"column":10,"nodeType":"130","messageId":"131","endLine":29,"endColumn":17},{"ruleId":"128","severity":1,"message":"143","line":29,"column":19,"nodeType":"130","messageId":"131","endLine":29,"endColumn":29},{"ruleId":"128","severity":1,"message":"144","line":30,"column":10,"nodeType":"130","messageId":"131","endLine":30,"endColumn":15},{"ruleId":"128","severity":1,"message":"145","line":30,"column":17,"nodeType":"130","messageId":"131","endLine":30,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":61,"column":6,"nodeType":"148","endLine":61,"endColumn":31,"suggestions":"149"},{"ruleId":"128","severity":1,"message":"150","line":11,"column":24,"nodeType":"130","messageId":"131","endLine":11,"endColumn":33},{"ruleId":"128","severity":1,"message":"151","line":3,"column":21,"nodeType":"130","messageId":"131","endLine":3,"endColumn":29},{"ruleId":"128","severity":1,"message":"152","line":11,"column":29,"nodeType":"130","messageId":"131","endLine":11,"endColumn":43},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"@typescript-eslint/no-unused-vars","'useAuthState' is defined but never used.","Identifier","unusedVar","'useCollectionData' is defined but never used.","'auth' is defined but never used.","'createGroupChat' is defined but never used.","'GroupUsers' is defined but never used.","'Modal' is defined but never used.","'fetchUsers' is defined but never used.","'fetchContacts' is defined but never used.","'fetchGroups' is defined but never used.","'addContact' is defined but never used.","'searchInput' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'availableContacts' and 'selectedContacts'. Either include them or remove the dependency array.","ArrayExpression",["155"],"'contactId' is assigned a value but never used.","'firebase' is defined but never used.","'conversationId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},"Update the dependencies array to be: [availableContacts, selectedContacts, selectedContacts.length]",{"range":"158","text":"159"},[2040,2065],"[availableContacts, selectedContacts, selectedContacts.length]"]